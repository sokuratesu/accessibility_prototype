name: Accessibility Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Monday at 2 AM
    - cron: '0 2 * * 1'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      urls:
        description: 'URLs to test (comma-separated)'
        required: false
        default: ''

jobs:
  accessibility-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Chrome
      run: |
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Firefox
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install webdriver-manager selenium pillow opencv-python numpy

    - name: Run accessibility tests
      env:
        WAVE_API_KEY: ${{ secrets.WAVE_API_KEY }}
      run: |
        # Get URLs from workflow dispatch input or use default
        if [ -n "${{ github.event.inputs.urls }}" ]; then
          URLS="${{ github.event.inputs.urls }}"
        else
          URLS="https://example.com,https://google.com"
        fi

        # Convert comma-separated list to space-separated for argparse
        URLS_ARG=$(echo $URLS | tr ',' ' ')

        # Run the accessibility tests
        python -m cicd_integration --urls $URLS_ARG \
          --browsers chrome firefox \
          --testers axe lighthouse \
          --report-dir reports \
          --desktop --tablet --mobile \
          --verbose

    - name: Upload reports
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-reports
        path: reports/

    - name: Check for critical issues
      run: |
        # Check if there are any critical accessibility issues
        python -m cicd_integration.check_critical_issues --report-dir reports
      continue-on-error: true